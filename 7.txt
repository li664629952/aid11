前情回顾

1. HTTP协议

   什么协议： 应用层  网络协议  使用TCP传输  无状态  可持久连接
   干什么用： 获取网页(如何获取网页)  数据传输
   请求和响应

      请求格式：   请求行 GET POST HEAD PUT DELETE
                     GET  /XXXX  HTTP/1.1

                 请求头
                 空行
                 请求体

      响应格式：   响应行  200  404
                 响应头
                 空行
                 响应体  数据

2. 进程

   * 加快多个任务执行的速度
   * 多个任务在执行上互不影响

   fork()

   gitpid()  gitppid()  os._exit()  sys.exit()


聊天室思路分析

1. 需求分析： 代码怎么用，要达到什么效果

      打开软件-》加入群聊-》聊天-》退出群聊-》结束软件

      客户端
      服务端

2. 技术分析： 通过什么技术去解决需求

      * 网络 ：  UDP网络

      * 消息发送，消息路径 ： 客户端-》服务端-》其他客户端

      * 服务端怎么保存用户信息： {name:address}
                            [(name,address),()]
                            class Person:
                                def __init__(self,name,address):
                                    self.name = name
                                    self.address = address
                            [Person(),]

      * 客户端同时收发消息：使用不同的进程进行消息收发

3. 结构分析

      封装方法： 函数封装

      * 将整体功能拆分成过个单一功能，每个功能进行封装

4. 功能分析

   * 网络机构搭建
   * 进入聊天室
   * 聊天
   * 退出聊天室
   * 管理员消息

   通信协议： LOGIN
            CHAT
            QUIT

            OK (成功)

5. 把每个步骤的逻辑列出来

   * 网络结构搭建

      客户端 ： udp客户端

      服务端 ： udp服务端

   * 进入聊天室

      客户端： 输入姓名
              发送请求
              接受结果 （进入，拒绝）

      服务端： 接受请求（区分请求类型）
              判断是否允许登录（是，否）
              将结果发送给客户端
              （是） 通知其他用户

   * 聊天

      客户端： 创建新的进程
              一个进程发消息
              一个进程收消息

      服务端： 接受请求（区分请求类型）
              将消息发送给其他人


   * 退出聊天室 (输入quit 或者直接ctrl-c 表示退出)
         客户端： 输入quit
                将请求发送给服务端
                结束进程

         服务端: 接受请求
                告知其他人
                将该用户从user中删除


   * 管理员消息


作业： 1. 将聊天室梳理






